const BadRequestError = require('../errors/bad-request-error');
const DatabaseConnectionError = require('../errors/database-connection-error');
const NotAuthorizedError = require('../errors/not-authorized-error');
const NotFoundError = require('../errors/not-found-error');
const RequestValidationError = require('../errors/request-validation-error');

async function errorHandler(err, req, res, next) {
  if (err instanceof BadRequestError) {
    // Handle bad request errors

    await res.status(err.statusCode).json({ errors: err.errors});
  } else if (err instanceof DatabaseConnectionError) {
    // Handle database connection errors
    const error = new DatabaseConnectionError(err.message);
    await res.status(error.statusCode).json({ error: error.message });
  } else if (err instanceof NotAuthorizedError) {
    // Handle not authorized errors
    const error = new NotAuthorizedError(err.message);
   await res.status(error.statusCode).json({ error: error.message });
  } else if (err instanceof NotFoundError) {
    // Handle not found errors
    const error = new NotFoundError(err.message);
    await res.status(error.statusCode).json({ error: error.message});
  } else if (err instanceof RequestValidationError) {
    
    const serializedErrors = err.errors.map(error => {
      return {
          errors: error.msg,
          field: error.param
      };
  });
 await res.status(err.statusCode).json({ errors: serializedErrors });
  } else {
    // Handle other errors
    console.error('Unhandled error:', err);
    await res.status(500).json({ error: 'Internal Server error' });
  }
}

module.exports = errorHandler;
